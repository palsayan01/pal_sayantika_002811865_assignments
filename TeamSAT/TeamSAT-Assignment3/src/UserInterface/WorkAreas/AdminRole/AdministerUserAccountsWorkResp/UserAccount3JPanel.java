/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp;

import Business.Course.Transcript;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Profiles.EmployerDirectory;
import Business.Profiles.EmployerProfile;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import Business.Profiles.Profile;
import Business.Profiles.StudentDirectory;
import Business.Profiles.StudentProfile;
import Business.Profiles.ThirdPartyDirectory;
import Business.Profiles.ThirdPartyProfile;
import Business.UserAccounts.UserAccount;
import Business.UserAccounts.UserAccountDirectory;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;

/**
 *
 * @author anupb
 */
public class UserAccount3JPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserAccount3JPanel
     */
    
    
    JSplitPane splitPane;    
    PersonDirectory personDirectory;
    UserAccountDirectory useraccountdirectroy;
    StudentDirectory studentdirectory;
    FacultyDirectory facultydirectory;
    ThirdPartyDirectory thirdpartydirectory;
    boolean accExist;
    UserAccount userAcc;
    Person prsn;
    EmployerDirectory employerdirectory;    
    
    
    public UserAccount3JPanel(JSplitPane splitPane,PersonDirectory personDirectory, Person prsn, UserAccountDirectory useraccountdirectroy, FacultyDirectory facultydirectory, StudentDirectory studentdirectory,  UserAccount userAcc, ThirdPartyDirectory thirdpartydirectory, EmployerDirectory employerdirectory) {
        initComponents();
        
        this.splitPane = splitPane;
        this.personDirectory = personDirectory;
        this.useraccountdirectroy=useraccountdirectroy;
        this.facultydirectory=facultydirectory;
        this.studentdirectory=studentdirectory;
        this.thirdpartydirectory=thirdpartydirectory;
        this.prsn=prsn;
        this.employerdirectory=employerdirectory;
        txtName.setText(prsn.getName());
        txtId.setText(prsn.getPersonId());
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPwd = new javax.swing.JLabel();
        txtPwd = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblRole = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        cmbRole = new javax.swing.JComboBox<>();
        cmbStatus = new javax.swing.JComboBox<>();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("CREATE USER ACCOUNT");

        lblUsername.setText("Username");

        lblPwd.setText("Password");

        txtPwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPwdActionPerformed(evt);
            }
        });

        lblId.setText("ID");

        txtName.setEditable(false);
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtId.setEditable(false);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblRole.setText("Role");

        lblName.setText("Name");

        lblStatus.setText("Status");

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Faculty", "Student", "Authorizer", "Employer"}));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enabled"}));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblName)
                                        .addComponent(lblId))
                                    .addGap(58, 58, 58)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtName)
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(lblPwd)
                                .addComponent(lblRole)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblUsername)
                                        .addComponent(lblStatus))
                                    .addGap(37, 37, 37)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cmbStatus, 0, 135, Short.MAX_VALUE)
                                            .addComponent(cmbRole, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnBack)))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBack, btnSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPwd)
                    .addComponent(txtPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRole)
                    .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnBack))
                .addContainerGap(201, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(txtId.getText().equals("") || txtPwd.getText().equals("") || cmbRole.getSelectedItem().toString().equals("") || cmbStatus.getSelectedItem().toString().equals("")||txtUsername.getText().equals(""))
        {
          JOptionPane.showMessageDialog(this,"Please enter all the fields to create user account", "Warning", JOptionPane.WARNING_MESSAGE);
        }   
        else
        { 
            if (cmbRole.getSelectedItem().toString().equals("Student"))
            {
                System.out.println(useraccountdirectroy.getUserAccountList());
                for (UserAccount ua : useraccountdirectroy.getUserAccountList())
                    {
                        if (ua.getRole().equals("admin"))
                            continue;
                        
                        else if(useraccountdirectroy.getUserAccountList().size()>1)
                      {
                          if(ua.getPrsn().getPersonId()!=null && txtId.getText().equals(ua.getPrsn().getPersonId()) )
                          {
                          JOptionPane.showMessageDialog(this, "User account already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                          accExist=true;
                          break; 
                          }
                      }
                        else if (useraccountdirectroy.getUserAccountList().size()==1)
                      {
                         accExist=false;
                         break;
                      }
                        else
                            continue;
                    }
                if(accExist==false)
                {  
                    if(!txtPwd.getText().matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$")){
                    
                        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    
                    else
                    {
                    Transcript t=new Transcript();
                    Profile studprofile=studentdirectory.newStudentProfile(prsn, txtId.getText(), t, "XXXX");
                    //userAcc=useraccountdirectroy.newUserAccount(prsn, studprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //useraccountdirectroy.getUserAccountList().add(userAcc);
                    useraccountdirectroy.newUserAccount(prsn, studprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    
                    //userAcc=new UserAccount(prsn, studprofile, txtUsername.getText(), txtPwd.getText(), txtRole.getText(), txtStatus.getText());
                    //useraccountdirectroy.getUserAccountList().add(userAcc);
                    JOptionPane.showMessageDialog(this, "User account created successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }}
            }
            
            else if (cmbRole.getSelectedItem().toString().equals("Faculty"))
            {
                               
                for (UserAccount ua : useraccountdirectroy.getUserAccountList())
                    {   
                        System.out.println(useraccountdirectroy.getUserAccountList().size());
                        if (ua.getRole().equals("admin"))
                            continue;
                        
                        else if(useraccountdirectroy.getUserAccountList().size()>1)
                      {
                          System.out.println(ua.getPrsn().getPersonId());
                          if(ua.getPrsn().getPersonId()!=null && txtId.getText().equals(ua.getPrsn().getPersonId()) )
                                  {
                          JOptionPane.showMessageDialog(this, "User account already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                          accExist=true;
                          break;   
                                  }
                      }
                      else if (useraccountdirectroy.getUserAccountList().size()==1)
                      {
                         accExist=false;
                         break;
                      }
                      else
                          continue;
                    }
                if(accExist==false)
                {
                    
                    
                    
                    if(!txtPwd.getText().matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$")){
                    
                        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    
                    else{ 
                    FacultyProfile facultyprofile=facultydirectory.newFacultyProfile(prsn, txtId.getText(), "Not Defined", 5);
                    //userAcc=new UserAccount(prsn, facultyprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //useraccountdirectroy.getUserAccountList().add(userAcc);
                    useraccountdirectroy.newUserAccount(prsn, facultyprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //facultydirectory.getFacultylist().add(facultyprofile);
                    JOptionPane.showMessageDialog(this, "User account created successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
                }
            }
            
            else if (cmbRole.getSelectedItem().toString().equals("Authorizer"))
            {
                               
                for (UserAccount ua : useraccountdirectroy.getUserAccountList())
                    {   
                        System.out.println(useraccountdirectroy.getUserAccountList().size());
                        if (ua.getRole().equals("admin"))
                            continue;
                        
                        else if(useraccountdirectroy.getUserAccountList().size()>1)
                      {
                          System.out.println(ua.getPrsn().getPersonId());
                          if(ua.getPrsn().getPersonId()!=null && txtId.getText().equals(ua.getPrsn().getPersonId()) )
                                  {
                          JOptionPane.showMessageDialog(this, "User account already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                          accExist=true;
                          break;   
                                  }
                      }
                      else if (useraccountdirectroy.getUserAccountList().size()==1)
                      {
                         accExist=false;
                         break;
                      }
                      else
                          continue;
                    }
                if(accExist==false)
                {
                    
                    
                    
                    if(!txtPwd.getText().matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$")){
                    
                        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    
                    else{ 
                    ThirdPartyProfile thirdparty=thirdpartydirectory.newTPProfile(txtId.getText(),prsn, "Not Defined", "Not Defined");
                    //userAcc=new UserAccount(prsn, facultyprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //useraccountdirectroy.getUserAccountList().add(userAcc);
                    useraccountdirectroy.newUserAccount(prsn, thirdparty, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //facultydirectory.getFacultylist().add(facultyprofile);
                    JOptionPane.showMessageDialog(this, "User account created successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
                }
            }
            
            else if (cmbRole.getSelectedItem().toString().equals("Employer"))
            {
                               
                for (UserAccount ua : useraccountdirectroy.getUserAccountList())
                    {   
                        System.out.println(useraccountdirectroy.getUserAccountList().size());
                        if (ua.getRole().equals("admin"))
                            continue;
                        
                        else if(useraccountdirectroy.getUserAccountList().size()>1)
                      {
                          System.out.println(ua.getPrsn().getPersonId());
                          if(ua.getPrsn().getPersonId()!=null && txtId.getText().equals(ua.getPrsn().getPersonId()) )
                                  {
                          JOptionPane.showMessageDialog(this, "User account already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                          accExist=true;
                          break;   
                                  }
                      }
                      else if (useraccountdirectroy.getUserAccountList().size()==1)
                      {
                         accExist=false;
                         break;
                      }
                      else
                          continue;
                    }
                if(accExist==false)
                {
                    
                    
                    
                    if(!txtPwd.getText().matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$")){
                    
                        JOptionPane.showMessageDialog(this, "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                    
                    else{ 
                    EmployerProfile employerprofile=employerdirectory.newEmployerProfile(prsn);
                    //userAcc=new UserAccount(prsn, facultyprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //useraccountdirectroy.getUserAccountList().add(userAcc);
                    useraccountdirectroy.newUserAccount(prsn, employerprofile, txtUsername.getText(), txtPwd.getText(), cmbRole.getSelectedItem().toString(), cmbStatus.getSelectedItem().toString());
                    //facultydirectory.getFacultylist().add(facultyprofile);
                    JOptionPane.showMessageDialog(this, "User account created successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
                }
            }
        
        
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        UserAccount2JPanel uajpl2 = new UserAccount2JPanel(splitPane, personDirectory,prsn,useraccountdirectroy,facultydirectory,studentdirectory, userAcc,thirdpartydirectory,employerdirectory);
        splitPane.setRightComponent(uajpl2);

    }//GEN-LAST:event_btnBackActionPerformed

    private void txtPwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPwdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPwd;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPwd;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
